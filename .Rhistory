xlab = "basis number",
ylab = "GCV",
main = "MARS step GCV")
legend(c("topright"),
legend = c("growing", "pruning"),
col = c("black","red"),
pch = 16)
abline(v = min_size_mars)
}
PlotAndSave(temp_plot_function, my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_gcv_plot.jpeg",
collapse = ""))
PlotAndSave(temp_plot_function, my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_gcv_plot.jpeg",
collapse = ""))
mars_step = polymars(responses = sss$y,
predictors = sss,
gcv = 1,
weights = MY_WEIGHTS_sss,
factors = var_factor_index,
maxsize = 60)
print("mars min size gcv")
min_size_mars = mars_step$fitting$size[which.min(mars_step$fitting$GCV)]
min_size_mars
temp_plot_function = function(){
plot(mars_step$fitting$size, mars_step$fitting$GCV,
col = as.factor(mars_step$fitting$`0/1`),
pch = 16,
xlab = "basis number",
ylab = "GCV",
main = "MARS step GCV")
legend(c("topright"),
legend = c("growing", "pruning"),
col = c("black","red"),
pch = 16)
abline(v = min_size_mars)
}
PlotAndSave(temp_plot_function, my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_gcv_plot.jpeg",
collapse = ""))
mars_step = polymars(responses = sss$y,
predictors = sss[,-y_index],
gcv = 1,
weights = MY_WEIGHTS_sss,
maxsize = 60)
print("mars min size gcv")
min_size_mars = mars_step$fitting$size[which.min(mars_step$fitting$GCV)]
min_size_mars
temp_plot_function = function(){
plot(mars_step$fitting$size, mars_step$fitting$GCV,
col = as.factor(mars_step$fitting$`0/1`),
pch = 16,
xlab = "basis number",
ylab = "GCV",
main = "MARS step GCV")
legend(c("topright"),
legend = c("growing", "pruning"),
col = c("black","red"),
pch = 16)
abline(v = min_size_mars)
}
PlotAndSave(temp_plot_function, my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_gcv_plot.jpeg",
collapse = ""))
colnames(sss)
# data.frame case
num_index = which(colnames(sss[,-y_index]) %in% var_num_names)
num_index
factor_index = setdiff(1:NCOL(sss[,-y_index]), num_index)
factor_index
mars_step = polymars(responses = sss$y,
predictors = sss[,-y_index],
gcv = 1,
weights = MY_WEIGHTS_sss,
factors = factor_index,
maxsize = 60)
print("mars min size gcv")
min_size_mars = mars_step$fitting$size[which.min(mars_step$fitting$GCV)]
min_size_mars
temp_plot_function = function(){
plot(mars_step$fitting$size, mars_step$fitting$GCV,
col = as.factor(mars_step$fitting$`0/1`),
pch = 16,
xlab = "basis number",
ylab = "GCV",
main = "MARS step GCV")
legend(c("topright"),
legend = c("growing", "pruning"),
col = c("black","red"),
pch = 16)
abline(v = min_size_mars)
}
PlotAndSave(temp_plot_function, my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_gcv_plot.jpeg",
collapse = ""))
mars_step = polymars(responses = sss$y,
predictors = sss[,-y_index],
gcv = 1,
factors = factor_index,
maxsize = 60)
print("mars min size gcv")
min_size_mars = mars_step$fitting$size[which.min(mars_step$fitting$GCV)]
min_size_mars
temp_plot_function = function(){
plot(mars_step$fitting$size, mars_step$fitting$GCV,
col = as.factor(mars_step$fitting$`0/1`),
pch = 16,
xlab = "basis number",
ylab = "GCV",
main = "MARS step GCV")
legend(c("topright"),
legend = c("growing", "pruning"),
col = c("black","red"),
pch = 16)
abline(v = min_size_mars)
}
PlotAndSave(temp_plot_function, my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_gcv_plot.jpeg",
collapse = ""))
# weights used for each metric function
# default 1
MY_WEIGHTS_sss = rep(1, NROW(sss)) : NROW(sss)
# weights used for each metric function
# default 1
MY_WEIGHTS_sss = rep(1, NROW(sss)) / NROW(sss)
MY_WEIGHTS_vvv = rep(1, NROW(vvv)) / NROW(vvv)
head(MY_WEIGHTS_sss)
mars_step$model
plot(mars_step, predictor1 = 7)
plot(mars_step, predictor1 = 7)
mars_step = polymars(responses = sss$y,
predictors = sss[,-y_index],
gcv = 1,
weights = MY_WEIGHTS_sss,
factors = factor_index,
maxsize = 60)
mars_step = polymars(responses = sss$y,
predictors = sss[,-y_index],
gcv = 1,
weights = MY_WEIGHTS_sss,
factors = factor_index,
maxsize = 60)
mars_step = polymars(responses = sss$y,
predictors = sss[,-y_index],
gcv = 1,
factors = factor_index,
maxsize = 60)
colnames(sss[,-y_index])
mars_step = polymars(responses = sss$y,
predictors = sss[,-y_index],
gcv = 1,
factors = factor_index,
maxsize = 50)
print("mars min size gcv")
min_size_mars = mars_step$fitting$size[which.min(mars_step$fitting$GCV)]
min_size_mars
temp_plot_function = function(){
plot(mars_step$fitting$size, mars_step$fitting$GCV,
col = as.factor(mars_step$fitting$`0/1`),
pch = 16,
xlab = "basis number",
ylab = "GCV",
main = "MARS step GCV")
legend(c("topright"),
legend = c("growing", "pruning"),
col = c("black","red"),
pch = 16)
abline(v = min_size_mars)
}
PlotAndSave(temp_plot_function, my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_gcv_plot.jpeg",
collapse = ""))
mars_step = polymars(responses = sss$y,
predictors = sss[,-y_index],
gcv = 1,
weights = MY_WEIGHTS_sss,
factors = factor_index,
maxsize = 50)
# weights used for each metric function
# default 1
MY_WEIGHTS_sss = rep(1, NROW(sss))
MY_WEIGHTS_vvv = rep(1, NROW(vvv))
# sparse is preferred is there are many categorical predictors (sparse matrix)
library(Matrix)
X_mm_no_interaction_sss =  sparse.model.matrix(formula_no_interaction_no_intercept, data = sss)
X_mm_no_interaction_vvv =  sparse.model.matrix(formula_no_interaction_no_intercept, data = vvv)
lambda_vals = glmnet(x = X_mm_no_interaction_sss, y = sss$y,
alpha = 0, lambda.min.ratio = 1e-07)$lambda
ridge_no_interaction_metrics = ManualCvGlmnet(my_id_list_cv = ID_CV_LIST,
my_metric_names = METRICS_NAMES,
my_x = X_mm_no_interaction_sss,
my_y = sss$y,
my_alpha = 0,
my_lambda_vals = lambda_vals,
my_weights = MY_WEIGHTS_sss,
use_only_first_fold = USE_ONLY_FIRST_FOLD)
ridge_no_int_best_summary = CvMetricBest(my_param_values = lambda_vals,
my_metric_matrix = ridge_no_interaction_metrics[["metrics"]],
my_one_se_best = TRUE,
my_higher_more_complex = FALSE,
my_se_matrix = ridge_no_interaction_metrics[["se"]],
my_metric_names = METRICS_NAMES)
PlotAndSave(function()(
PlotCvMetrics(my_param_values = log(lambda_vals),
my_metric_matrix = ridge_no_interaction_metrics[["metrics"]],
my_se_matrix = ridge_no_interaction_metrics[["se"]],
my_best_param_values =log(ExtractBestParams(ridge_no_int_best_summary)),
my_metric_names = METRICS_NAMES,
my_main = "Ridge no interaction CV metrics",
my_xlab = " log lambda")),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"ridge_no_int_metrics_plot.jpeg",
collapse = ""))
print("ridge_no_int_best_summary")
ridge_no_int_best_summary
ridge_no_interaction = glmnet(x = X_mm_no_interaction_sss,
y = sss$y,
alpha = 0,
lambda = ridge_no_int_best_summary[[METRIC_CHOSEN_NAME]][["best_param_value"]])
df_metrics = Add_Test_Metric(df_metrics,
"ridge_no_interaction",
USED.Metrics(predict(ridge_no_interaction, newx = X_mm_no_interaction_vvv),
vvv$y,
weights = MY_WEIGHTS_vvv))
df_metrics
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Modello Additivo ---------------------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
library(gam)
?step.Gam()
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"lm_step_no_interaction",
".Rdata", collapse = "", sep = ""))
coef_lm_step_no_int = coef(lm_step_no_interaction)
temp_coef = coef(lm_step_no_interaction)
summary(temp_coef)
temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>% dotchart()
temp_main = "(abs) greatest linear model coefficients"
temp_coef = coef(lm_step_no_interaction)
temp_main = "(abs) greatest linear model coefficients"
summary(temp_coef)
print(paste("coefficients ", "lm_step_no_interaction", collapse = ""))
temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>% dotchart(pch = 16,
main = temp_main)
temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>%
sort() %>%
dotchart(pch = 16, main = temp_main)
sorted_temp_coef = temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>% sort()
sorted_temp_coef %>% dotchart(pch = 16, main = temp_main)
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"lm_step_yes_interaction",
".Rdata", collapse = "", sep = ""))
temp_coef = coef(lm_step_yes_interaction)
temp_main = "(abs) greatest linear model coefficients yes interaction"
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>% sort()
sorted_temp_coef %>% dotchart(pch = 16, main = temp_main)
temp_coef = coef(ridge_no_interaction)
temp_main = "(abs) greatest ridge coefficients no interaction"
summary(temp_coef)
temp_coef = predict(ridge_no_interaction, type = "coef")
temp_coef
temp_coef = predict(ridge_no_interaction, type = "coef") %>% as.numeric()
temp_coef
temp_coef = predict(ridge_no_interaction, type = "coef")
str(temp_coef)
temp_coef@x
temp_coef@Dimnames
temp_main = "(abs) greatest ridge coefficients no interaction"
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>% sort()
sorted_temp_coef %>% dotchart(pch = 16, main = temp_main)
sorted_temp_coef = temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>% sort()
sorted_temp_coef %>% dotchart(pch = 16, main = temp_main)
PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"lm_step_no_interaction",
".Rdata", collapse = "", sep = ""))
temp_coef = coef(lm_step_no_interaction)
temp_main = "(abs) greatest linear model coefficients no interaction"
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>% sort()
PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
temp_coef = coef(lm_step_yes_interaction)
temp_main = "(abs) greatest linear model coefficients yes interaction"
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>% sort()
PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_yes_int_plot.jpeg",
collapse = ""))
temp_coef = predict(ridge_no_interaction, type = "coef")
temp_glmnet_object = predict(ridge_no_interaction, type = "coef")
temp_coef = temp_glmnet_object@x
names(temp_coef) = temp_glmnet_object@Dimnames[[1]]
temp_coef
temp_main = "(abs) greatest ridge coefficients no interaction"
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>% sort()
sorted_temp_coef %>% dotchart(pch = 16, main = temp_main)
sorted_temp_coef %>% dotchart(pch = 16, main = temp_main)
sorted_temp_coef = temp_coef[which((temp_coef < -1) | (temp_coef > 1)) ] %>% sort()
sorted_temp_coef %>% dotchart(pch = 16, main = temp_main)
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -1) | (temp_coef > 0.8)) ] %>% sort()
sorted_temp_coef %>% dotchart(pch = 16, main = temp_main)
PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_ridge_no_int_plot.jpeg",
collapse = ""))
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"ridge_yes_interaction",
".Rdata", collapse = "", sep = ""))
temp_glmnet_object = predict(ridge_yes_interaction, type = "coef")
temp_coef = temp_glmnet_object@x
names(temp_coef) = temp_glmnet_object@Dimnames[[1]]
temp_main = "(abs) greatest ridge coefficients yes interaction"
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -0.8) | (temp_coef > 0.5)) ] %>% sort()
PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_ridge_yes_int_plot.jpeg",
collapse = ""))
temp_coef
names(temp_coef) = temp_glmnet_object@Dimnames[[1]]
temp_glmnet_object@Dimnames
temp_glmnet_object = predict(ridge_yes_interaction, type = "coef")
temp_coef = temp_glmnet_object@x
length(temp_coef)
length(temp_glmnet_object@Dimnames[[1]])
temp_glmnet_object
str(temp_glmnet_object)
?Matrix
temp_glmnet_object@Dimnames
temp_glmnet_object
as.matrix(temp_glmnet_object)
temp_glmnet_object = predict(ridge_yes_interaction, type = "coef") %>% as.matrix()
temp_glmnet_object %>% object.size()
temp_glmnet_object %>% dim()
temp_glmnet_object[,1]
temp_glmnet_object = predict(ridge_yes_interaction, type = "coef") %>% as.matrix()
temp_coef = temp_glmnet_object[,1]
temp_main = "(abs) greatest ridge coefficients yes interaction"
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -0.8) | (temp_coef > 0.5)) ] %>% sort()
PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_ridge_yes_int_plot.jpeg",
collapse = ""))
PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_ridge_yes_int_plot.jpeg",
collapse = ""))
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"ridge_no_interaction",
".Rdata", collapse = "", sep = ""))
temp_glmnet_object = predict(ridge_no_interaction, type = "coef") %>% as.matrix()
temp_coef = temp_glmnet_object[,1]
temp_main = "(abs) greatest ridge coefficients no interaction"
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -1) | (temp_coef > 0.8)) ] %>% sort()
PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_ridge_no_int_plot.jpeg",
collapse = ""))
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"lasso_no_interaction",
".Rdata", collapse = "", sep = ""))
temp_glmnet_object = predict(lasso_no_interaction, type = "coef") %>% as.matrix()
temp_coef = temp_glmnet_object[,1]
temp_main = "(abs) greatest lasso coefficients no interaction"
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -2) | (temp_coef > 0.8)) ] %>% sort()
PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lasso_no_int_plot.jpeg",
collapse = ""))
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"lasso_yes_interaction",
".Rdata", collapse = "", sep = ""))
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"lasso_yes_interaction",
".Rdata", collapse = "", sep = ""))
temp_glmnet_object = predict(lasso_yes_interaction, type = "coef") %>% as.matrix()
temp_coef = temp_glmnet_object[,1]
temp_main = "(abs) greatest lasso coefficients yes interaction"
summary(temp_coef)
sorted_temp_coef = temp_coef[which((temp_coef < -0.8) | (temp_coef > 0.5)) ] %>% sort()
PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lasso_yes_int_plot.jpeg",
collapse = ""))
tree_temp_plot_fun = function(){
plot(final_tree_pruned, main = "Tree")
text(final_tree_pruned, cex = 0.7)
}
PlotAndSave(my_plotting_function = tree_temp_plot_fun ,
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lasso_yes_int_plot.jpeg",
collapse = ""))
# Tree -----------------
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"final_tree_pruned",
".Rdata", collapse = "", sep = ""))
tree_temp_plot_fun = function(){
plot(final_tree_pruned, main = "Tree")
text(final_tree_pruned, cex = 0.7)
}
PlotAndSave(my_plotting_function = tree_temp_plot_fun ,
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lasso_yes_int_plot.jpeg",
collapse = ""))
# Gam ------------------
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"gam_step",
".Rdata", collapse = "", sep = ""))
PlotAndSave(my_plotting_function = tree_temp_plot_fun ,
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"tree_pruned_plot.jpeg",
collapse = ""))
# Gam ------------------
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"gam_step",
".Rdata", collapse = "", sep = ""))
gam_step$model
summary(gam_step)
# MARS -----------------
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"mars_step",
".Rdata", collapse = "", sep = ""))
print("mars step model")
mars_step$model
mars_step = polymars(responses = sss$y,
predictors = sss[,-y_index],
gcv = 1,
factors = factor_index,
maxsize = 50)
print("mars min size gcv")
min_size_mars = mars_step$fitting$size[which.min(mars_step$fitting$GCV)]
min_size_mars
temp_plot_function = function(){
plot(mars_step$fitting$size, mars_step$fitting$GCV,
col = as.factor(mars_step$fitting$`0/1`),
pch = 16,
xlab = "basis number",
ylab = "GCV",
main = "MARS step GCV")
legend(c("topright"),
legend = c("growing", "pruning"),
col = c("black","red"),
pch = 16)
abline(v = min_size_mars)
}
PlotAndSave(temp_plot_function, my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_gcv_plot.jpeg",
collapse = ""))
df_metrics = Add_Test_Metric(df_metrics,
"MARS",
USED.Metrics(predict(mars_step, x = X_mm_no_interaction_vvv),
vvv$y,
weights = MY_WEIGHTS_vvv))
df_metrics
# save the df_metrics as .Rdata
save(df_metrics, file = "df_metrics.Rdata")
file_name_mars_step = paste(MODELS_FOLDER_RELATIVE_PATH,
"mars_step",
".Rdata", collapse = "", sep = "")
save(mars_step, file = file_name_mars_step)
rm(mars_step)
gc()
# MARS -----------------
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"mars_step",
".Rdata", collapse = "", sep = ""))
print("mars step model")
mars_step$model
num_index = which(colnames(sss[,-y_index]) %in% var_num_names)
factor_index = setdiff(1:NCOL(sss[,-y_index]), num_index)
num_index
design.polymars(mars_step)
?design.polymars(mars_step)
colnames(sss[,-y_index])
colnames(sss[,-y_index])[num_index]
num_names =  colnames(sss[,-y_index])[num_index]
factor_names = colnames(sss[,-y_index])[-num_index]
factor_names
mars_names = colnames(sss[,-y_index])
mars_names
# get the index by variable name
temp_index = which(mars_names == "x8")
temp_index
# plots
plot(mars_step, predictor1 = temp_index)
?save
mars_names = colnames(sss[,-y_index])
save(list = c(mars_step, mars_names), file = file_name_mars_step)
save(mars_step,
mars_names,
file = file_name_mars_step)
# get the index by variable name
temp_index = which(mars_names == "x8")
# plots
PlotAndSave(my_plotting_function = function() plot(mars_step, predictor1 = temp_index),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_1_plot.jpeg",
collapse = ""))
