# per motivi computazionali, al costo di perdere informazioni
# riduco le modalità a 25 modalità
# funzione per una singola variabile
GroupValuesQual = function(df, qual_vector_var_name, new_name = "Altro"){
temp_table_freq = table(df[,qual_vector_var_name]) %>% sort(decreasing = T)
# meno di 30 modalità: non c'è bisogno di nessuna modifica
if (length(temp_table_freq) <= 25){
return(df[, qual_vector_var_name])
}
# altrimenti riduci le modalità
# seleziona la frequenza soglia oltre cui aggregare
# (temp_table_freq è già ordinata in ordine decrescente per frequenza)
freq_threshold = temp_table_freq[24]
return(RaggruppaModalita(df, qual_vector_var_name, temp_table_freq,
freq_threshold, new_name))
}
char_var_names = colnames(dati[,-y_index])[which(unlist(lapply(dati[,-y_index], typeof)) == "character")]
for(name in char_var_names){
dati[,name] = GroupValuesQual(dati, name, "Altro")
}
str(dati)
# check
unique_vals_df = data.frame(nome = rep("", NCOL(dati)),
indice = rep(0, NCOL(dati)),
uniques = rep(0, NCOL(dati)))
unique_vals_df$nome = colnames(dati)
unique_vals_df$indice = as.numeric(1:NCOL(dati))
unique_vals_df$uniques = as.numeric(apply(dati, 2, function(col) length(unique(col))))
unique_vals_df
# eslcusione della y
unique_vals_df_no_y = unique_vals_df[-which(unique_vals_df$nome == "y"),]
unique_vals_df_no_y
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Riduzione quantitative in qualitative per poche modalità --------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# + qualitative che sono codificate numericamente
# indici delle esplicative con meno di min_modalità modalità
# da aumentare in base al problema
min_modalita = 2
index_min_modalita = unique_vals_df_no_y$indice[which(unique_vals_df_no_y$uniques <= min_modalita)]
index_min_modalita
# trasformo in fattore queste ultime
for(i in index_min_modalita){
dati[,i] = as.factor(dati[,i])
}
str(dati)
# +++++++++++++++++++++++++++++++++++++++++++++++++
# Nomi e indici di colonna delle variabili
# ++++++++++++++++++++++++++++++++++++++++++++++++++
# nomi delle esplicative qualitative e quantitative
# potrei dover effettuare questa operazione più volte
y_index = which(colnames(dati) == "y")
var_factor_index = which(sapply(dati, is.factor))
# se comprende l'indice della y  lo rimuovo
# da sistemare
if (y_index %in% var_factor_index){
var_factor_index = var_factor_index[-which(var_factor_index == y_index)]}
var_char_index = which(sapply(dati, is.character))
# se comprende l'indice della y  lo rimuovo
# da sistemare
if (y_index %in% var_char_index){
var_char_index = var_char_index[-which(var_char_index == y_index)]}
# comprende anche int
var_num_index = as.numeric(which(sapply(dati, is.numeric)))
# se comprende l'indice della y lo rimuovo
if (y_index %in% var_num_index){
var_num_index = var_num_index[-which(var_num_index == y_index)]}
# +++++++++++++++++++++++++++++++++++++++++++++++++
# Conversione character in factor
# ++++++++++++++++++++++++++++++++++++++++++++++++++
for(i in var_char_index){
dati[,i] = as.factor(dati[,i])
}
str(dati)
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Aggiorno indici qualitative e nomi qualitative e quantitative
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
var_qual_index =  as.numeric(c(var_char_index, var_factor_index))
var_qual_names = var_names[var_qual_index]
var_num_names = var_names[var_num_index]
# check
var_qual_index
var_num_index
var_qual_names
var_num_names
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Analisi istrogramma quantitative -------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# per ogni variabile esplicativa quantitativa
# disegna l'istrogramma della sua distribuzione empirica
# e quella del suo logaritmo (opportunamente traslata)
# @input: my_df (data.frame)
# @input var_index_subset (vector of int): indexes of quantitative variables subset
# output: plots of each quantitative variable histogram
DrawQuantHist = function(my_df,
var_index_subset = NULL,
my_breaks = 50){
# all variables
if(is.null(var_index_subset)){
var_index_subset = 1:NCOL(my_df)}
var_index_counter = 0
var_names_temp = colnames(my_df)
par(mfrow = c(1,2))
print("press (enter) to forward and 'b' to backward and q to quit")
while(var_index_counter < length(var_index_subset)){
input = readline("")
if((input == "q")){
var_index_counter = length(var_index_subset) - 1}
if((input != "b")){
var_index_counter = var_index_counter + 1}
if(input == "b"){
var_index_counter = var_index_counter - 1}
if(var_index_counter <= 0){
var_index_counter = 1}
# original scale
hist(my_df[,var_index_subset[var_index_counter]],
breaks = my_breaks,
main = var_names_temp[var_index_subset[var_index_counter]],
xlab = "values")
# log translated scale
temp_min = min(my_df[,var_index_subset[var_index_counter]])
if(temp_min > 0){
temp_min = 0}
hist(log(my_df[,var_index_subset[var_index_counter]] - temp_min + 1e-05 ),
breaks = my_breaks,
main = paste("log", var_names_temp[var_index_subset[var_index_counter]]),
xlab = "log values")
}
par(mfrow = c(1,1))
}
# Analisi istogrammi
# DrawQuantHist(dati, var_num_index)
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Scope ----------------------------------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# funzione per creare le stringhe di interazione
# tra variabili della stessa tipologia
# (quantitativa - quantitativa e fattore - fattore)
# '@ input: array of strings
# '@ return string formula of interaction terms
# example :
# input = c("a", "b", "c")
# output = "a:b + a:c + b:c"
MakeSameInteractionsString = function(input_var_type_names){
# preliminary checks
if(length(input_var_type_names) == 0){
cat("Warning: input_var_type_names is of length 0, return empty string")
return("")
}
type_type_interactions_string = ""
for (i in 1:length(input_var_type_names)){
for (j in (i+1):length(input_var_type_names)){
if (!(is.na(input_var_type_names[i]) | is.na(input_var_type_names[j])) & (j != i))
type_type_interactions_string = paste(type_type_interactions_string,
" + ",
input_var_type_names[i],
":",
input_var_type_names[j])
}
}
# Remove the first " + " from the string
type_type_interactions_string = substring(type_type_interactions_string, 6)
return(type_type_interactions_string)
}
# stringhe intermedie
no_interaction_string = paste(var_names[-y_index], collapse = " + ")
qual_num_interactions_string = paste(outer(var_num_names,
var_qual_names,
FUN = function(x, y) paste(x, y, sep = ":")), collapse = " + ")
qual_qual_interactions_string = MakeSameInteractionsString(var_qual_names)
num_num_interactions_string = MakeSameInteractionsString(var_num_names)
# variabili quantitative al quadrato
num_vars_square_string = ""
if(length(var_num_names) != 0){
num_vars_square_string <- paste("I(",
var_num_names,
"^2)",
sep = "", collapse = " + ")}
# string terms vector: vector of string terms
# return formula object
MakeFormula = function(string_terms_vector, intercept_bool = TRUE){
base_formula = "y ~ "
# remove empty vector terms
string_terms_vector = string_terms_vector[which(string_terms_vector != "")]
if (intercept_bool == FALSE){
base_formula = paste(base_formula, " - 1 + ")
}
added_terms = paste(string_terms_vector, collapse = " + ")
return(as.formula(paste(base_formula, added_terms)))
}
# creazione delle formule
# per evitare errori dovuti a formule troppo lunghe
options(expressions = 50000)
formula_yes_interaction_yes_intercept <- MakeFormula(c(no_interaction_string,
num_vars_square_string,
qual_qual_interactions_string,
qual_num_interactions_string))
formula_yes_interaction_no_intercept <- MakeFormula(c(no_interaction_string,
num_vars_square_string,
qual_qual_interactions_string,
qual_num_interactions_string),
intercept_bool = FALSE)
formula_yes_interaction_yes_intercept
formula_yes_interaction_no_intercept
# formula senza interazioni
formula_no_interaction_yes_intercept = MakeFormula(no_interaction_string)
formula_no_interaction_no_intercept = MakeFormula(no_interaction_string, intercept_bool = FALSE)
formula_no_interaction_yes_intercept
formula_no_interaction_no_intercept
# /////////////////////////////////////////
# Backup data.frame + environment ---------
# ////////////////////////////////////////
save(dati,
y_index,
var_qual_index, var_qual_names,
var_num_index, var_num_names,
formula_no_interaction_no_intercept,
formula_no_interaction_yes_intercept,
formula_yes_interaction_no_intercept,
formula_yes_interaction_yes_intercept,
file = "result_preprocessing.Rdata")
# if necessary delete all
# rm(list = ls())
# in case of problems: load only useful objects
# load("result_preprocessing.Rdata")
# ///////////////////////////////////
# Save output on file ---------------
# //////////////////////////////////
# text.txt -------------
# # close previoulsy opened sink (if opened) -> I should make a control
# sink()
# initialize the output .txt file to regularly write on in case
# the software crashes
# open new sink
TEXT_OUTPUT_FILE_NAME = "text_output_models.txt"
# open sink
sink(TEXT_OUTPUT_FILE_NAME, append = TRUE, split = TRUE)
library(snowfall)
# number of cores
N_CORES = parallel::detectCores()
#////////////////////////////////////////////////////////////////////////////
# Metrics and data.frame --------------------------------------------------
#////////////////////////////////////////////////////////////////////////////
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Quantitative response ---------------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
source("loss_functions.R")
# °°°°°°°°°°°°°°°°°°°°°°° Warning: °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
# change functions for specific problems
# in generale uso sia MAE che MSE
USED.Metrics = function(y.pred, y.test, weights = 1){
return(c(MAE.Loss(y.pred, y.test, weights), MSE.Loss(y.pred, y.test, weights)))
}
df_metrics = data.frame(name = NA, MAE = NA, MSE = NA)
METRICS_NAMES = colnames(df_metrics[,-1])
N_METRICS = length(METRICS_NAMES)
# names used to extract the metric added to df_metrics
# change based on the spefific problem
METRIC_VALUES_NAME = "metric_values"
METRIC_CHOSEN_NAME = "MSE"
# names used for accessing list CV matrix (actual metrics and metrics se)
LIST_METRICS_ACCESS_NAME = "metrics"
LIST_SD_ACCESS_NAME = "se"
# metrics names + USED.Loss
# WARNING: the order should be same as in df_metrics
MY_USED_METRICS = c("USED.Metrics", "MAE.Loss", "MSE.Loss")
# /////////////////////////////////////////////////////////////////
#------------------------ Train & Test ------------------------
# /////////////////////////////////////////////////////////////////
# eventually change the proportion
id_stima = sample(1:NROW(dati), 0.75 * NROW(dati))
sss = dati[id_stima,]
vvv = dati[-id_stima,]
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Parameter tuning: Train & Test on Train subset  --------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
id_cb1 = sample(1:NROW(sss), 0.8 * NROW(sss))
# delete original data.frame from main memory
rm(dati)
gc()
# ///////////////////////////////////
# Weights ---------------
# //////////////////////////////////
# weights used for each metric function
# default 1
MY_WEIGHTS_sss = rep(1, NROW(sss))
MY_WEIGHTS_vvv = rep(1, NROW(vvv))
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Parameter tuning: cross validation on train: building cv folds  -------------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
K_FOLDS = 10
NROW_sss = NROW(sss)
SHUFFLED_ID = sample(1:NROW_sss, NROW_sss)
# NOTE: if the row number of sss is not a multiple of K_FOLDS
# the last fold repeats some ids from the first
# this is fixed in the code below
id_matrix_cv = matrix(SHUFFLED_ID, ncol = K_FOLDS)
# conversion of matrix in list of elements: each element contains a subset of ids
ID_CV_LIST = list()
for(j in 1:ncol(id_matrix_cv)){
ID_CV_LIST[[j]] = id_matrix_cv[,j]
}
rm(id_matrix_cv)
gc()
# repeated ids fixing
integer_division_cv = NROW_sss %/% K_FOLDS
modulo_cv = NROW_sss %% K_FOLDS
if(modulo_cv != 0){
ID_CV_LIST[[K_FOLDS]] = ID_CV_LIST[[K_FOLDS]][1:integer_division_cv]
}
source("cv_functions.R")
# FALSE = traditional CV on all folds
# TRUE -> use only first fold to test and all other to fit
USE_ONLY_FIRST_FOLD = FALSE
load("df_metrics.Rdata")
df_metrics
# Implementazione in parallelo
library(ranger)
library(snowfall)
sfInit(cpus = N_CORES, parallel = T)
sfLibrary(ranger)
sfExport(list = c("sss"))
# massimo numero di esplicative presenti
m_max = NCOL(sss) - 1 # sottraggo 1 per la variabile risposta
# regolazione
# procedura sub-ottimale, ma la impiego per ragioni computazionali
# prima scelgo il numero di esplicative a ogni split,
# una volta scelto controllo la convergenza dell'errore basata sul numero di alberi
err = rep(NA, m_max - 1)
for(i in seq(2, m_max)){
sfExport(list = c("i"))
err[i] = sum(sfSapply(rep(1:8),
function(x) ranger(y ~., data = sss,
mtry = i,
num.trees = 50,
oob.error = TRUE)$prediction.error))
print(i)
gc()
}
err
best_mtry = which.min(err)
print("best mtry random forest")
best_mtry
sfExport(list = c("best_mtry"))
err_rf_trees = rep(NA, 90)
# °°°°°°°°°°°°°°°°°°°°°°°°°°°Warning: lento°°°°°°°°°°°°°°°°°°°°°°°°°°°°
for(j in 10:100){
sfExport(list = c("j"))
err_rf_trees[j] = sum(sfSapply(rep(1:4),
function(x) ranger(y ~., sss,
mtry = best_mtry,
num.trees = j,
oob.error = TRUE)$prediction.error))
print(j)
gc()
}
sfStop()
plot((1:length(err_rf_trees)) * 4, err_rf_trees,
xlab = "numero di alberi bootstrap",
ylab = "errore out of bag",
pch = 16,
main = "Random Forest")
PlotAndSave(my_plotting_function =  function()plot((1:length(err_rf_trees)) * 4, err_rf_trees,
xlab = "Bootstrap trees number",
ylab = "Out of bag MSE",
pch = 16,
main = "Random Forest"),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"random_forest_convergence_plot.jpeg",
collapse = ""))
# modello finale e previsioni
random_forest_model = ranger(y ~., sss,
mtry = best_mtry,
num.trees = 400,
oob.error = TRUE,
importance = "permutation")
df_metrics = Add_Test_Metric(df_metrics,
"Random Forest",
USED.Metrics(predict(random_forest_model, data = vvv,
type = "response")$predictions,
vvv$y,
weights = MY_WEIGHTS_vvv))
df_metrics
# save the df_metrics as .Rdata
save(df_metrics, file = "df_metrics.Rdata")
# Importanza delle variabili
vimp = importance(random_forest_model)
PlotAndSave(my_plotting_function =  function() dotchart(vimp[order(vimp)]),
my_path_plot = my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
PlotAndSave(my_plotting_function =  function() dotchart(vimp[order(vimp)]),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"random_forest_importance_plot.jpeg",
collapse = ""))
PlotAndSave(my_plotting_function =  function() dotchart(vimp[order(vimp)],
pch = 16),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"random_forest_importance_plot.jpeg",
collapse = ""))
vimp
PlotAndSave(my_plotting_function =  function() dotchart(vimp[order(vimp)],
pch = 16,
main = "Random Forest Variable Importance"),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"random_forest_importance_plot.jpeg",
collapse = ""))
?ranger
PlotAndSave(my_plotting_function =  function() dotchart(vimp[order(vimp)],
pch = 16,
main = "Random Forest Variable Importance",
xlab = "deviance increase"),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"random_forest_importance_plot.jpeg",
collapse = ""))
PlotAndSave(my_plotting_function =  function() dotchart(vimp[order(vimp)],
pch = 16,
main = "Random Forest Variable Importance Permutation",
xlab = "deviance increase"),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"random_forest_importance_plot.jpeg",
collapse = ""))
# save metrics and model
file_name_random_forest = paste(MODELS_FOLDER_RELATIVE_PATH,
"random_forests",
".Rdata", collapse = "", sep = "")
save(random_forest_model, file = file_name_random_forest)
rm(random_forest_model)
gc()
cbind(df_metrics[,1],
apply(df_metrics[,2:NCOL(df_metrics)], 2, function(col) round(as.numeric(col), 2)))
cbind(df_metrics[,1],
apply(df_metrics[,2:NCOL(df_metrics)], 2, function(col) round(as.numeric(col), 2)))
load(MODELS_FOLDER_RELATIVE_PATH,
"lm_step_no_interaction",
".Rdata", collapse = "", sep = "")
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"lm_step_no_interaction",
".Rdata", collapse = "", sep = ""))
print(paste("coefficients ", "lm_step_no_interaction", collapse = ""))
coef(lm_step_no_interaction)
dotchart(coef(lm_step_no_interaction))
dotchart(coef(lm_step_no_interaction))
dotchart(coef(lm_step_no_interaction) %>% sort(decreasing = TRUE))
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"lm_step_yes_interaction",
".Rdata", collapse = "", sep = ""))
print(paste("coefficients ", "lm_step_yes_interaction", collapse = ""))
coef(lm_step_yes_interaction)
dotchart(coef(lm_step_yes_interaction) %>% sort(decreasing = TRUE))
coef(lm_step_no_interaction) %>% abs %>% which() %>% > 1
coef(lm_step_no_interaction) %>% abs
which(abs(coef(lm_step_no_interaction)) > 1)
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"lasso_yes_interaction",
".Rdata", collapse = "", sep = ""))
coef(lasso_yes_interaction)
coef(lasso_yes_interaction) %>% dotchart()
dotchart(coef(lasso_yes_interaction))
dotchart(coef(lasso_yes_interaction) %>% as.numeric())
# Gam ------------------
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"gam_step",
".Rdata", collapse = "", sep = ""))
plot(gam_step, terms = c("s(x1, df = 4)"), se = T)
gam_step
coef(gam_step)
summary(gam_step)
plot(gam_step, terms = c("s(x8, df = 4)"), se = T)
# MARS -----------------
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"mars_step",
".Rdata", collapse = "", sep = ""))
print("mars step model")
mars_step$model
# plots
plot(mars_step, predictor1 = 40, predictor2 = 30)
# plots
plot(mars_step, predictor1 = 7, predictor2 = 30)
# plots
plot(mars_step, predictor1 = 7)
# plots
plot(mars_step, pred1 = 7)
# plots
plot(mars_step, predictor1 = 7)
# plots
plot(mars_step, predictor1 = 5)
dotchart(coef(lasso_yes_interaction)[which(coef(lasso_yes_interaction) != 0)] %>% as.numeric())
dotchart(coef(lasso_yes_interaction)[which(coef(lasso_yes_interaction) != 0)] %>% as.numeric())
which(abs(coef(lm_step_no_interaction)) > 1)
abs(coef(lm_step_no_interaction)) %>% sort(decreasing = T)
abs(coef(lm_step_no_interaction))
coef(lm_step_no_interaction)[which(abs(coef(lm_step_no_interaction)) > 3)]
coef(lm_step_no_interaction)[which(abs(coef(lm_step_no_interaction)) > 1)]
abs(coef(lm_step_no_interaction))
quantile(coef(lm_step_no_interaction))
quantile(coef(lm_step_no_interaction), na.rm = T)
coef(lm_step_no_interaction) %>% sort(decreasing = T)
coef(lm_step_no_interaction) %>% sort(decreasing = T)
coef(lm_step_no_interaction) %>% boxplot()
coef(lm_step_no_interaction) %>% boxplot()
rounded_df = cbind(df_metrics[,1],
apply(df_metrics[,2:NCOL(df_metrics)], 2, function(col) round(as.numeric(col), 2)))
rounded_df
?order
# Tree -----------------
load(paste(MODELS_FOLDER_RELATIVE_PATH,
"final_tree_pruned",
".Rdata", collapse = "", sep = ""))
plot(final_tree_pruned)
text(final_tree_pruned)
text(final_tree_pruned, cex = 0.7)
plot(final_tree_pruned)
text(final_tree_pruned, cex = 0.7)
