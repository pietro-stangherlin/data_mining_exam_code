PlotAndSave(my_plotting_function = function() sorted_temp_coef %>% dotchart(pch = 16, main = temp_main),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
PlotCoefs(named_coef_vector = temp_coef,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
#' @param path_plot (where the plot should be saved)
#' @param my_width (int): pixel width of saved plot
#' @param my_height (int): pixel height of saved plot
#' @param my_point_size (int): point size of saved plot
#' @param my_quality (int): quality of saved plot
#'
#' @return none
#'
#' @description Save and Plot the most relevant and abs(greatest) coefficients
#'
PlotCoefs = function(named_coef_vector,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "Coefs",
path_plot,
my_width = FIGURE_WIDTH,
my_height = FIGURE_HEIGHT,
my_point_size = FIGURE_POINT_SIZE,
my_quality = FIGURE_QUALITY){
chosen_indexes = c()
coef_names = names(named_coef_vector)
# interest_var_names
if(!is.null(interest_var_names)){
for (name in interest_var_names){
chosen_indexes = c(chosen_indexes, grep(name, coef_names))
}
chosen_indexes = unique(chosen_indexes)
}
abs_coefs_sorted_decreasing = sort(abs(named_coef_vector), decreasing = T)
if(show_first_n < length(named_coef_vector)){
limit_value = abs_coefs_sorted_decreasing[show_first_n]
}
else{
limit_value = -Inf
}
chosen_indexes = c(chosen_indexes,
which(chosen_indexes <= - limit_value),
which(chosen_indexes >= limit_value))
chosen_indexes = unique(chosen_indexes)
PlotAndSave(my_plotting_function = function() dotchart(sort(chosen_indexes[chosen_indexes]),
pch = 16,
main = plot_title),
my_path_plot = path_plot)
}
PlotCoefs(named_coef_vector = temp_coef,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
temp_coef
#' @param path_plot (where the plot should be saved)
#' @param width (int): pixel width of saved plot
#' @param height (int): pixel height of saved plot
#' @param point_size (int): point size of saved plot
#' @param quality (int): quality of saved plot
#'
#' @return none
#'
#' @description Save and Plot the most relevant and abs(greatest) coefficients
#'
PlotCoefs = function(named_coef_vector,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "Coefs",
path_plot,
width = FIGURE_WIDTH,
height = FIGURE_HEIGHT,
point_size = FIGURE_POINT_SIZE,
quality = FIGURE_QUALITY){
chosen_indexes = c()
coef_names = names(named_coef_vector)
# interest_var_names
if(!is.null(interest_var_names)){
for (name in interest_var_names){
chosen_indexes = c(chosen_indexes, grep(name, coef_names))
}
chosen_indexes = unique(chosen_indexes)
}
abs_coefs_sorted_decreasing = sort(abs(named_coef_vector), decreasing = T)
if(show_first_n < length(named_coef_vector)){
limit_value = abs_coefs_sorted_decreasing[show_first_n]
}
else{
limit_value = -Inf #plot all coefs
}
chosen_indexes = c(chosen_indexes,
which(chosen_indexes <= - limit_value),
which(chosen_indexes >= limit_value))
print(chosen_indexes)
chosen_indexes = unique(chosen_indexes)
PlotAndSave(my_plotting_function = function() dotchart(sort(chosen_indexes[chosen_indexes]),
pch = 16,
main = plot_title),
my_path_plot = path_plot,
my_width = width,
my_height = height,
my_point_size = point_size,
my_quality = quality)
}
PlotCoefs(named_coef_vector = temp_coef,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
summary(temp_coef)
#' @param path_plot (where the plot should be saved)
#' @param width (int): pixel width of saved plot
#' @param height (int): pixel height of saved plot
#' @param point_size (int): point size of saved plot
#' @param quality (int): quality of saved plot
#'
#' @return none
#'
#' @description Save and Plot the most relevant and abs(greatest) coefficients
#'
PlotCoefs = function(named_coef_vector,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "Coefs",
path_plot,
width = FIGURE_WIDTH,
height = FIGURE_HEIGHT,
point_size = FIGURE_POINT_SIZE,
quality = FIGURE_QUALITY){
chosen_indexes = c()
coef_names = names(named_coef_vector)
# interest_var_names
if(!is.null(interest_var_names)){
for (name in interest_var_names){
chosen_indexes = c(chosen_indexes, grep(name, coef_names))
}
chosen_indexes = unique(chosen_indexes)
}
abs_coefs_sorted_decreasing = sort(abs(named_coef_vector), decreasing = T)
if(show_first_n <= length(named_coef_vector)){
limit_value = abs_coefs_sorted_decreasing[show_first_n]
}
else{
limit_value = -Inf #plot all coefs
}
print(limit_value)
chosen_indexes = c(chosen_indexes,
which(chosen_indexes <= - limit_value),
which(chosen_indexes >= limit_value))
print(chosen_indexes)
chosen_indexes = unique(chosen_indexes)
PlotAndSave(my_plotting_function = function() dotchart(sort(chosen_indexes[chosen_indexes]),
pch = 16,
main = plot_title),
my_path_plot = path_plot,
my_width = width,
my_height = height,
my_point_size = point_size,
my_quality = quality)
}
PlotCoefs(named_coef_vector = temp_coef,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
#' @param path_plot (where the plot should be saved)
#' @param width (int): pixel width of saved plot
#' @param height (int): pixel height of saved plot
#' @param point_size (int): point size of saved plot
#' @param quality (int): quality of saved plot
#'
#' @return none
#'
#' @description Save and Plot the most relevant and abs(greatest) coefficients
#'
PlotCoefs = function(named_coef_vector,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "Coefs",
path_plot,
width = FIGURE_WIDTH,
height = FIGURE_HEIGHT,
point_size = FIGURE_POINT_SIZE,
quality = FIGURE_QUALITY){
chosen_indexes = c()
coef_names = names(named_coef_vector)
# interest_var_names
if(!is.null(interest_var_names)){
for (name in interest_var_names){
chosen_indexes = c(chosen_indexes, grep(name, coef_names))
}
chosen_indexes = unique(chosen_indexes)
}
abs_coefs_sorted_decreasing = sort(abs(named_coef_vector), decreasing = T)
if(show_first_n <= length(named_coef_vector)){
limit_value = abs_coefs_sorted_decreasing[show_first_n]
}
else{
limit_value = -Inf #plot all coefs
}
print(limit_value)
print(which(chosen_indexes <= - limit_value))
print(which(chosen_indexes >= limit_value))
chosen_indexes = c(chosen_indexes,
which(chosen_indexes <= - limit_value),
which(chosen_indexes >= limit_value))
print(chosen_indexes)
chosen_indexes = unique(chosen_indexes)
PlotAndSave(my_plotting_function = function() dotchart(sort(chosen_indexes[chosen_indexes]),
pch = 16,
main = plot_title),
my_path_plot = path_plot,
my_width = width,
my_height = height,
my_point_size = point_size,
my_quality = quality)
}
PlotCoefs(named_coef_vector = temp_coef,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
#' @param path_plot (where the plot should be saved)
#' @param width (int): pixel width of saved plot
#' @param height (int): pixel height of saved plot
#' @param point_size (int): point size of saved plot
#' @param quality (int): quality of saved plot
#'
#' @return none
#'
#' @description Save and Plot the most relevant and abs(greatest) coefficients
#'
PlotCoefs = function(named_coef_vector,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "Coefs",
path_plot,
width = FIGURE_WIDTH,
height = FIGURE_HEIGHT,
point_size = FIGURE_POINT_SIZE,
quality = FIGURE_QUALITY){
chosen_indexes = c()
coef_names = names(named_coef_vector)
# interest_var_names
if(!is.null(interest_var_names)){
for (name in interest_var_names){
chosen_indexes = c(chosen_indexes, grep(name, coef_names))
}
chosen_indexes = unique(chosen_indexes)
}
abs_coefs_sorted_decreasing = sort(abs(named_coef_vector), decreasing = T)
if(show_first_n <= length(named_coef_vector)){
limit_value = abs_coefs_sorted_decreasing[show_first_n]
}
else{
limit_value = -Inf #plot all coefs
}
chosen_indexes = c(chosen_indexes,
which(named_coef_vector <= - limit_value),
which(named_coef_vector >= limit_value))
print(chosen_indexes)
chosen_indexes = unique(chosen_indexes)
PlotAndSave(my_plotting_function = function() dotchart(sort(chosen_indexes[chosen_indexes]),
pch = 16,
main = plot_title),
my_path_plot = path_plot,
my_width = width,
my_height = height,
my_point_size = point_size,
my_quality = quality)
}
PlotCoefs(named_coef_vector = temp_coef,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
#' @param path_plot (where the plot should be saved)
#' @param width (int): pixel width of saved plot
#' @param height (int): pixel height of saved plot
#' @param point_size (int): point size of saved plot
#' @param quality (int): quality of saved plot
#'
#' @return none
#'
#' @description Save and Plot the most relevant and abs(greatest) coefficients
#'
PlotCoefs = function(named_coef_vector,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "Coefs",
path_plot,
width = FIGURE_WIDTH,
height = FIGURE_HEIGHT,
point_size = FIGURE_POINT_SIZE,
quality = FIGURE_QUALITY){
chosen_indexes = c()
coef_names = names(named_coef_vector)
# interest_var_names
if(!is.null(interest_var_names)){
for (name in interest_var_names){
chosen_indexes = c(chosen_indexes, grep(name, coef_names))
}
chosen_indexes = unique(chosen_indexes)
}
abs_coefs_sorted_decreasing = sort(abs(named_coef_vector), decreasing = T)
if(show_first_n <= length(named_coef_vector)){
limit_value = abs_coefs_sorted_decreasing[show_first_n]
}
else{
limit_value = -Inf #plot all coefs
}
chosen_indexes = c(chosen_indexes,
which(named_coef_vector <= - limit_value),
which(named_coef_vector >= limit_value))
print(chosen_indexes)
chosen_indexes = unique(chosen_indexes)
PlotAndSave(my_plotting_function = function() dotchart(sort(named_coef_vector[chosen_indexes]),
pch = 16,
main = plot_title),
my_path_plot = path_plot,
my_width = width,
my_height = height,
my_point_size = point_size,
my_quality = quality)
}
PlotCoefs(named_coef_vector = temp_coef,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
PlotCoefs(named_coef_vector = temp_coef,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
PlotCoefs(named_coef_vector = temp_coef,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
#' @param path_plot (where the plot should be saved)
#' @param width (int): pixel width of saved plot
#' @param height (int): pixel height of saved plot
#' @param point_size (int): point size of saved plot
#' @param quality (int): quality of saved plot
#'
#' @return none
#'
#' @description Save and Plot the most relevant and abs(greatest) coefficients
#'
PlotCoefs = function(named_coef_vector,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "Coefs",
path_plot,
width = FIGURE_WIDTH,
height = FIGURE_HEIGHT,
point_size = FIGURE_POINT_SIZE,
quality = FIGURE_QUALITY){
chosen_indexes = c()
coef_names = names(named_coef_vector)
# interest_var_names
if(!is.null(interest_var_names)){
for (name in interest_var_names){
chosen_indexes = c(chosen_indexes, grep(name, coef_names))
}
chosen_indexes = unique(chosen_indexes)
}
abs_coefs_sorted_decreasing = sort(abs(named_coef_vector), decreasing = T)
if(show_first_n <= length(named_coef_vector)){
limit_value = abs_coefs_sorted_decreasing[show_first_n]
}
else{
limit_value = -Inf #plot all coefs
}
chosen_indexes = c(chosen_indexes,
which(named_coef_vector <= - limit_value),
which(named_coef_vector >= limit_value))
chosen_indexes = unique(chosen_indexes)
PlotAndSave(my_plotting_function = function() dotchart(sort(named_coef_vector[chosen_indexes]),
pch = 16,
main = plot_title),
my_path_plot = path_plot,
my_width = width,
my_height = height,
my_point_size = point_size,
my_quality = quality)
}
PlotCoefs(named_coef_vector = temp_coef,
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
PlotCoefs(named_coef_vector = coef(lm_step_no_interaction),
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients no interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_no_int_plot.jpeg",
collapse = ""))
PlotCoefs(named_coef_vector = coef(lm_step_yes_interaction),
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients yes interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_yes_int_plot.jpeg",
collapse = ""))
lm_step_yes_interaction = step(lm0, scope = formula_yes_interaction_yes_intercept,
direction = "forward")
formula(lm_step_yes_interaction)
df_metrics = Add_Test_Metric(df_metrics,
"lm_step_yes_interaction",
USED.Metrics(predict(lm_step_yes_interaction, newdata = vvv),
vvv$y,
weights = MY_WEIGHTS_vvv))
df_metrics
# save the model as .Rdata
# then remove it from main memory
file_name_lm_step_yes_interaction = paste(MODELS_FOLDER_RELATIVE_PATH,
"lm_step_yes_interaction",
".Rdata", collapse = "", sep = "")
save(lm_step_yes_interaction, file = file_name_lm_step_yes_interaction)
PlotCoefs(named_coef_vector = coef(lm_step_yes_interaction),
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients yes interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_yes_int_plot.jpeg",
collapse = ""))
rm(lm_step_yes_interaction)
rm(lm0)
gc()
# save the df_metrics as .Rdata
save(df_metrics, file = "df_metrics.Rdata")
lambda_vals = glmnet(x = X_mm_no_interaction_sss, y = sss$y,
alpha = 0, lambda.min.ratio = 1e-07)$lambda
ridge_no_interaction_metrics = ManualCvGlmnet(my_id_list_cv_train = ID_CV_LIST,
my_metric_names = METRICS_NAMES,
my_x = X_mm_no_interaction_sss,
my_y = sss$y,
my_alpha = 0,
my_lambda_vals = lambda_vals,
my_weights = MY_WEIGHTS_sss,
use_only_first_fold = USE_ONLY_FIRST_FOLD)
ridge_no_int_best_summary = CvMetricBest(my_param_values = lambda_vals,
my_metric_matrix = ridge_no_interaction_metrics[["metrics"]],
my_one_se_best = TRUE,
my_higher_more_complex = FALSE,
my_se_matrix = ridge_no_interaction_metrics[["se"]],
my_metric_names = METRICS_NAMES)
PlotAndSave(function()(
PlotCvMetrics(my_param_values = log(lambda_vals),
my_metric_matrix = ridge_no_interaction_metrics[["metrics"]],
my_se_matrix = ridge_no_interaction_metrics[["se"]],
my_best_param_values =log(ExtractBestParams(ridge_no_int_best_summary)),
my_metric_names = METRICS_NAMES,
my_main = "Ridge no interaction CV metrics",
my_xlab = " log lambda")),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"ridge_no_int_metrics_plot.jpeg",
collapse = ""))
print("ridge_no_int_best_summary")
ridge_no_int_best_summary
ridge_no_interaction = glmnet(x = X_mm_no_interaction_sss,
y = sss$y,
alpha = 0,
lambda = ridge_no_int_best_summary[[METRIC_CHOSEN_NAME]][["best_param_value"]])
df_metrics = Add_Test_Metric(df_metrics,
"ridge_no_interaction",
USED.Metrics(predict(ridge_no_interaction, newx = X_mm_no_interaction_vvv),
vvv$y,
weights = MY_WEIGHTS_vvv))
df_metrics
# save the df_metrics as .Rdata
save(df_metrics, file = "df_metrics.Rdata")
file_name_ridge_no_interaction = paste(MODELS_FOLDER_RELATIVE_PATH,
"ridge_no_interaction",
".Rdata", collapse = "", sep = "")
save(ridge_no_interaction, file = file_name_ridge_no_interaction)
predict(ridge_no_interaction, type = "coef")
predict(ridge_no_interaction, type = "coef") %>% as.vector()
PlotCoefs(named_coef_vector = as.matrix(predict(ridge_no_interaction, type = "coef"))[,1],
interest_var_names = NULL,
show_first_n = 30,
plot_title = "(abs) greatest linear model coefficients yes interaction",
path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"coef_lm_yes_int_plot.jpeg",
collapse = ""))
