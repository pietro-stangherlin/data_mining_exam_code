# temp_table_freq
#
# dati[,"x5"] = RaggruppaModalita(dati, "x5", temp_table_freq, 400, "Altro")
#
# # check
# temp_table_freq = TableFreqFun(dati, "x5")
# temp_table_freq
#
# rm(temp_table_freq)
# Tutte le variabili character ------------------------
# per motivi computazionali, al costo di perdere informazioni
# riduco le modalità a 25 modalità
# funzione per una singola variabile
GroupValuesQual = function(df, qual_vector_var_name, new_name = "Altro"){
temp_table_freq = table(df[,qual_vector_var_name]) %>% sort(decreasing = T)
# meno di 30 modalità: non c'è bisogno di nessuna modifica
if (length(temp_table_freq) <= 25){
return(df[, qual_vector_var_name])
}
# altrimenti riduci le modalità
# seleziona la frequenza soglia oltre cui aggregare
# (temp_table_freq è già ordinata in ordine decrescente per frequenza)
freq_threshold = temp_table_freq[24]
return(RaggruppaModalita(df, qual_vector_var_name, temp_table_freq,
freq_threshold, new_name))
}
char_var_names = colnames(dati[,-y_index])[which(unlist(lapply(dati[,-y_index], typeof)) == "character")]
for(name in char_var_names){
dati[,name] = GroupValuesQual(dati, name, "Altro")
}
str(dati)
# check
unique_vals_df = data.frame(nome = rep("", NCOL(dati)),
indice = rep(0, NCOL(dati)),
uniques = rep(0, NCOL(dati)))
unique_vals_df$nome = colnames(dati)
unique_vals_df$indice = as.numeric(1:NCOL(dati))
unique_vals_df$uniques = as.numeric(apply(dati, 2, function(col) length(unique(col))))
unique_vals_df
# eslcusione della y
unique_vals_df_no_y = unique_vals_df[-which(unique_vals_df$nome == "y"),]
unique_vals_df_no_y
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Riduzione quantitative in qualitative per poche modalità --------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# + qualitative che sono codificate numericamente
# indici delle esplicative con meno di min_modalità modalità
# da aumentare in base al problema
min_modalita = 2
index_min_modalita = unique_vals_df_no_y$indice[which(unique_vals_df_no_y$uniques <= min_modalita)]
index_min_modalita
# trasformo in fattore queste ultime
for(i in index_min_modalita){
dati[,i] = as.factor(dati[,i])
}
str(dati)
# +++++++++++++++++++++++++++++++++++++++++++++++++
# Nomi e indici di colonna delle variabili
# ++++++++++++++++++++++++++++++++++++++++++++++++++
# nomi delle esplicative qualitative e quantitative
# potrei dover effettuare questa operazione più volte
y_index = which(colnames(dati) == "y")
var_factor_index = which(sapply(dati, is.factor))
# se comprende l'indice della y  lo rimuovo
# da sistemare
if (y_index %in% var_factor_index){
var_factor_index = var_factor_index[-which(var_factor_index == y_index)]}
var_char_index = which(sapply(dati, is.character))
# se comprende l'indice della y  lo rimuovo
# da sistemare
if (y_index %in% var_char_index){
var_char_index = var_char_index[-which(var_char_index == y_index)]}
# comprende anche int
var_num_index = as.numeric(which(sapply(dati, is.numeric)))
# se comprende l'indice della y lo rimuovo
if (y_index %in% var_num_index){
var_num_index = var_num_index[-which(var_num_index == y_index)]}
# +++++++++++++++++++++++++++++++++++++++++++++++++
# Conversione character in factor
# ++++++++++++++++++++++++++++++++++++++++++++++++++
for(i in var_char_index){
dati[,i] = as.factor(dati[,i])
}
str(dati)
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Aggiorno indici qualitative e nomi qualitative e quantitative
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
var_qual_index =  as.numeric(c(var_char_index, var_factor_index))
var_qual_names = var_names[var_qual_index]
var_num_names = var_names[var_num_index]
# check
var_qual_index
var_num_index
var_qual_names
var_num_names
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Analisi istrogramma quantitative -------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# per ogni variabile esplicativa quantitativa
# disegna l'istrogramma della sua distribuzione empirica
# e quella del suo logaritmo (opportunamente traslata)
# @input: my_df (data.frame)
# @input var_index_subset (vector of int): indexes of quantitative variables subset
# output: plots of each quantitative variable histogram
DrawQuantHist = function(my_df,
var_index_subset = NULL,
my_breaks = 50){
# all variables
if(is.null(var_index_subset)){
var_index_subset = 1:NCOL(my_df)}
var_index_counter = 0
var_names_temp = colnames(my_df)
par(mfrow = c(1,2))
print("press (enter) to forward and 'b' to backward and q to quit")
while(var_index_counter < length(var_index_subset)){
input = readline("")
if((input == "q")){
var_index_counter = length(var_index_subset) - 1}
if((input != "b")){
var_index_counter = var_index_counter + 1}
if(input == "b"){
var_index_counter = var_index_counter - 1}
if(var_index_counter <= 0){
var_index_counter = 1}
# original scale
hist(my_df[,var_index_subset[var_index_counter]],
breaks = my_breaks,
main = var_names_temp[var_index_subset[var_index_counter]],
xlab = "values")
# log translated scale
temp_min = min(my_df[,var_index_subset[var_index_counter]])
if(temp_min > 0){
temp_min = 0}
hist(log(my_df[,var_index_subset[var_index_counter]] - temp_min + 1e-05 ),
breaks = my_breaks,
main = paste("log", var_names_temp[var_index_subset[var_index_counter]]),
xlab = "log values")
}
par(mfrow = c(1,1))
}
# Analisi istogrammi
# DrawQuantHist(dati, var_num_index)
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Scope ----------------------------------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# funzione per creare le stringhe di interazione
# tra variabili della stessa tipologia
# (quantitativa - quantitativa e fattore - fattore)
# '@ input: array of strings
# '@ return string formula of interaction terms
# example :
# input = c("a", "b", "c")
# output = "a:b + a:c + b:c"
MakeSameInteractionsString = function(input_var_type_names){
# preliminary checks
if(length(input_var_type_names) == 0){
cat("Warning: input_var_type_names is of length 0, return empty string")
return("")
}
type_type_interactions_string = ""
for (i in 1:length(input_var_type_names)){
for (j in (i+1):length(input_var_type_names)){
if (!(is.na(input_var_type_names[i]) | is.na(input_var_type_names[j])) & (j != i))
type_type_interactions_string = paste(type_type_interactions_string,
" + ",
input_var_type_names[i],
":",
input_var_type_names[j])
}
}
# Remove the first " + " from the string
type_type_interactions_string = substring(type_type_interactions_string, 6)
return(type_type_interactions_string)
}
# stringhe intermedie
no_interaction_string = paste(var_names[-y_index], collapse = " + ")
qual_num_interactions_string = paste(outer(var_num_names,
var_qual_names,
FUN = function(x, y) paste(x, y, sep = ":")), collapse = " + ")
qual_qual_interactions_string = MakeSameInteractionsString(var_qual_names)
num_num_interactions_string = MakeSameInteractionsString(var_num_names)
# variabili quantitative al quadrato
num_vars_square_string = ""
if(length(var_num_names) != 0){
num_vars_square_string <- paste("I(",
var_num_names,
"^2)",
sep = "", collapse = " + ")}
# string terms vector: vector of string terms
# return formula object
MakeFormula = function(string_terms_vector, intercept_bool = TRUE){
base_formula = "y ~ "
# remove empty vector terms
string_terms_vector = string_terms_vector[which(string_terms_vector != "")]
if (intercept_bool == FALSE){
base_formula = paste(base_formula, " - 1 + ")
}
added_terms = paste(string_terms_vector, collapse = " + ")
return(as.formula(paste(base_formula, added_terms)))
}
# creazione delle formule
# per evitare errori dovuti a formule troppo lunghe
options(expressions = 50000)
formula_yes_interaction_yes_intercept <- MakeFormula(c(no_interaction_string,
num_vars_square_string,
qual_qual_interactions_string,
qual_num_interactions_string))
formula_yes_interaction_no_intercept <- MakeFormula(c(no_interaction_string,
num_vars_square_string,
qual_qual_interactions_string,
qual_num_interactions_string),
intercept_bool = FALSE)
formula_yes_interaction_yes_intercept
formula_yes_interaction_no_intercept
# formula senza interazioni
formula_no_interaction_yes_intercept = MakeFormula(no_interaction_string)
formula_no_interaction_no_intercept = MakeFormula(no_interaction_string, intercept_bool = FALSE)
formula_no_interaction_yes_intercept
formula_no_interaction_no_intercept
# /////////////////////////////////////////
# Backup data.frame + environment ---------
# ////////////////////////////////////////
save(dati,
y_index,
var_qual_index, var_qual_names,
var_num_index, var_num_names,
formula_no_interaction_no_intercept,
formula_no_interaction_yes_intercept,
formula_yes_interaction_no_intercept,
formula_yes_interaction_yes_intercept,
file = "result_preprocessing.Rdata")
# if necessary delete all
# rm(list = ls())
# in case of problems: load only useful objects
# load("result_preprocessing.Rdata")
# ///////////////////////////////////
# Save output on file ---------------
# //////////////////////////////////
# text.txt -------------
# # close previoulsy opened sink (if opened) -> I should make a control
# sink()
# initialize the output .txt file to regularly write on in case
# the software crashes
# open new sink
TEXT_OUTPUT_FILE_NAME = "text_output_models.txt"
# open sink
sink(TEXT_OUTPUT_FILE_NAME, append = TRUE, split = TRUE)
# ///////////////////////////////////
# Weights ---------------
# //////////////////////////////////
# weights used for each metric function
# default 1
MY_WEIGHTS = 1
# data wrangling
library(dplyr)
# parallel computing
library(snowfall)
# number of cores
N_CORES = parallel::detectCores()
#////////////////////////////////////////////////////////////////////////////
# Metrics and data.frame --------------------------------------------------
#////////////////////////////////////////////////////////////////////////////
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Quantitative response ---------------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
source("loss_functions.R")
# °°°°°°°°°°°°°°°°°°°°°°° Warning: °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
# change functions for specific problems
# in generale uso sia MAE che MSE
USED.Metrics = function(y.pred, y.test, weights = 1){
return(c(MAE.Loss(y.pred, y.test, weights), MSE.Loss(y.pred, y.test, weights)))
}
df_metrics = data.frame(name = NA, MAE = NA, MSE = NA)
METRICS_NAMES = colnames(df_metrics[,-1])
N_METRICS = length(METRICS_NAMES)
# names used to extract the metric added to df_metrics
# change based on the spefific problem
METRIC_VALUES_NAME = "metric_values"
METRIC_CHOSEN_NAME = "MSE"
# names used for accessing list CV matrix (actual metrics and metrics se)
LIST_METRICS_ACCESS_NAME = "metrics"
LIST_SD_ACCESS_NAME = "se"
# metrics names + USED.Loss
# WARNING: the order should be same as in df_metrics
MY_USED_METRICS = c("USED.Metrics", "MAE.Loss", "MSE.Loss")
# /////////////////////////////////////////////////////////////////
#------------------------ Train & Test ------------------------
# /////////////////////////////////////////////////////////////////
# eventually change the proportion
id_stima = sample(1:NROW(dati), 0.75 * NROW(dati))
sss = dati[id_stima,]
vvv = dati[-id_stima,]
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Parameter tuning: Train & Test on Train subset  --------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
id_cb1 = sample(1:NROW(sss), 0.8 * NROW(sss))
# delete original data.frame from main memory
rm(dati)
gc()
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Parameter tuning: cross validation on train: building cv folds  -------------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
K_FOLDS = 10
NROW_sss = NROW(sss)
SHUFFLED_ID = sample(1:NROW_sss, NROW_sss)
# NOTE: if the row number of sss is not a multiple of K_FOLDS
# the last fold repeats some ids from the first
# this is fixed in the code below
id_matrix_cv = matrix(SHUFFLED_ID, ncol = K_FOLDS)
# conversion of matrix in list of elements: each element contains a subset of ids
ID_CV_LIST = list()
for(j in 1:ncol(id_matrix_cv)){
ID_CV_LIST[[j]] = id_matrix_cv[,j]
}
rm(id_matrix_cv)
gc()
# repeated ids fixing
integer_division_cv = NROW_sss %/% K_FOLDS
modulo_cv = NROW_sss %% K_FOLDS
if(modulo_cv != 0){
ID_CV_LIST[[K_FOLDS]] = ID_CV_LIST[[K_FOLDS]][1:integer_division_cv]
}
source("cv_functions.R")
# FALSE = traditional CV on all folds
# TRUE -> use only first fold to test and all other to fit
USE_ONLY_FIRST_FOLD = FALSE
# /////////////////////////////////////////////////////////////////
#------------------------ Explorative Data Analysis ---------------
# /////////////////////////////////////////////////////////////////
# (on train set)
# check distribution of marginal response
hist(sss$y,nclass = 100)
summary(sss$y)
# check logaritm, a transformation (traslation) is maybe needed before
hist(log(sss$y), nclass = 100)
# NOTE: if logarithm is considered as response the difference of log
# is the log of the ratio
# /////////////////////////////////////////////////////////////////
#------------------------ MODELS ---------------------------------
# /////////////////////////////////////////////////////////////////
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Mean and Median --------------------
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Not considering predictors
df_metrics = Add_Test_Metric(df_metrics,
"sss mean",
USED.Metrics(mean(sss$y), vvv$y))
df_metrics = Add_Test_Metric(df_metrics,
"sss median",
USED.Metrics(median(sss$y), vvv$y))
df_metrics = na.omit(df_metrics)
df_metrics
# sparse is preferred is there are many categorical predictors (sparse matrix)
library(Matrix)
X_mm_no_interaction_sss =  sparse.model.matrix(formula_no_interaction_no_intercept, data = sss)
X_mm_no_interaction_vvv =  sparse.model.matrix(formula_no_interaction_no_intercept, data = vvv)
# computational heavy
X_mm_yes_interaction_sss =  sparse.model.matrix(formula_yes_interaction_no_intercept, data = sss)
X_mm_yes_interaction_vvv =  sparse.model.matrix(formula_yes_interaction_no_intercept, data = vvv)
library(glmnet)
# criterion to choose the model: "1se" or "lmin"
cv_criterion = "lambda.1se"
lambda_vals = glmnet(x = X_mm_no_interaction_sss, y = sss$y,
alpha = 0, lambda.min.ratio = 1e-07)$lambda
# YES Interaction -----------
lambda_vals = glmnet(x = X_mm_yes_interaction_sss, y = sss$y,
alpha = 0, lambda.min.ratio = 1e-07)$lambda
ridge_yes_interaction_metrics = ManualCvGlmnetParallel(my_id_list_cv = ID_CV_LIST,
my_metric_names = METRICS_NAMES,
my_x = X_mm_yes_interaction_sss,
my_y = sss$y,
my_alpha = 0,
my_lambda_vals = lambda_vals,
my_weights = MY_WEIGHTS,
my_metrics_functions = MY_USED_METRICS,
my_ncores = N_CORES,
use_only_first_fold = TRUE)
ridge_yes_interaction_metrics
ridge_yes_int_best_summary = CvMetricBest(my_param_values = lambda_vals,
my_metric_matrix = ridge_yes_interaction_metrics[["metrics"]],
my_one_se_best = FALSE,
my_higher_more_complex = FALSE,
my_se_matrix = ridge_yes_interaction_metrics[["se"]],
my_metric_names = METRICS_NAMES)
PlotAndSave(function()(
PlotCvMetrics(my_param_values = log(lambda_vals),
my_metric_matrix = ridge_yes_interaction_metrics[["metrics"]],
my_se_matrix = ridge_yes_interaction_metrics[["se"]],
my_best_param_values =log(ExtractBestParams(ridge_yes_int_best_summary)),
my_metric_names = METRICS_NAMES,
my_main = "Ridge yes interaction CV metrics",
my_xlab = " log lambda")),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"ridge_yes_int_metrics_plot.jpeg",
collapse = ""))
print("ridge_yes_int_best_summary")
ridge_yes_int_best_summary
ridge_yes_interaction = glmnet(x = X_mm_yes_interaction_sss,
y = sss$y,
alpha = 0,
lambda = ridge_yes_int_best_summary[[METRIC_CHOSEN_NAME]][["best_param_value"]])
ridge_yes_int_best_summary
ridge_yes_interaction_metrics
which.min(ridge_yes_interaction_metrics$metrics[,2])
which.min(ridge_yes_interaction_metrics$metrics[,1])
#' NOTE: if USED.Metrics contains some other functions they must be present as well, like the example
#' which is also the default
#'
#' @param my_ncores (int): number of cores used for parallel computing
#'
#' @return (list): list of two matrix
#' the first contains the CV folds averaged metrics for each parameter value and each metric
#' the second the CV computed standard errors of those metrics
#' first matrix is accessed by "metrics"
#' second matrix is accessed by "se"
ManualCvGlmnetParallel = function(my_id_list_cv,
my_metric_names,
my_x,
my_y,
my_alpha,
my_lambda_vals,
my_weights = 1,
my_metrics_functions = c("USED.Metrics", "MAE.Loss", "MSE.Loss"),
my_ncores = N_CORES,
use_only_first_fold = FALSE){
n_k_fold = length(my_id_list_cv)
my_n_metrics = length(my_metric_names)
if(use_only_first_fold == TRUE){
n_k_fold = 1
}
temp_metrics_array_cv = array(0, dim = c(n_k_fold, length(my_lambda_vals), my_n_metrics))
# init parallel cluster
sfInit(cpus = my_ncores, parallel = T)
sfLibrary(glmnet)
sfExport(list = c("my_x", "my_y", "my_alpha",
"my_lambda_vals", "my_weights", my_metrics_functions))
for (k in 1:n_k_fold){
id_train = unlist(my_id_list_cv[-k])
id_test = my_id_list_cv[[k]]
sfExport(list = c("id_train", "id_test"))
# for better readability
temp_metric = sfLapply(my_lambda_vals,
fun = function(lambda)
USED.Metrics(predict(glmnet(x = my_x[id_train,],
y = my_y[id_train], alpha = my_alpha,
lambda = lambda),
my_x[id_test,]), my_y[id_test]))
# unlist to the right dimensions matrix
temp_metrics_array_cv[k,,] = matrix(unlist(temp_metric), ncol = my_n_metrics, byrow = T)
rm(temp_metric)
gc()
print(paste("fold ", k, collapse = ""))
}
# stop parallel cluster
sfStop()
# averaged metrics matrix
cv_metrics = matrix(NA, nrow = length(my_lambda_vals), ncol = my_n_metrics)
# metrics standard deviations matrix
cv_metrics_se = matrix(NA, nrow = length(my_lambda_vals), ncol = my_n_metrics)
colnames(cv_metrics) = my_metric_names
colnames(cv_metrics_se) = my_metric_names
for (i in 1:my_n_metrics){
if(use_only_first_fold == FALSE){
cv_metrics[,i] = apply(temp_metrics_array_cv[,,i], 2, mean)
cv_metrics_se[,i] = apply(temp_metrics_array_cv[,,i], 2, sd)}
else{
cv_metrics[,i] = temp_metrics_array_cv[1,,i]
cv_metrics_se[,i] = Inf
}
}
return(list("metrics" = cv_metrics,
"se" = cv_metrics_se))
}
ridge_yes_interaction_metrics = ManualCvGlmnetParallel(my_id_list_cv = ID_CV_LIST,
my_metric_names = METRICS_NAMES,
my_x = X_mm_yes_interaction_sss,
my_y = sss$y,
my_alpha = 0,
my_lambda_vals = lambda_vals,
my_weights = MY_WEIGHTS,
my_metrics_functions = MY_USED_METRICS,
my_ncores = N_CORES,
use_only_first_fold = TRUE)
ridge_yes_interaction_metrics
ridge_yes_int_best_summary = CvMetricBest(my_param_values = lambda_vals,
my_metric_matrix = ridge_yes_interaction_metrics[["metrics"]],
my_one_se_best = FALSE,
my_higher_more_complex = FALSE,
my_se_matrix = ridge_yes_interaction_metrics[["se"]],
my_metric_names = METRICS_NAMES)
PlotAndSave(function()(
PlotCvMetrics(my_param_values = log(lambda_vals),
my_metric_matrix = ridge_yes_interaction_metrics[["metrics"]],
my_se_matrix = ridge_yes_interaction_metrics[["se"]],
my_best_param_values =log(ExtractBestParams(ridge_yes_int_best_summary)),
my_metric_names = METRICS_NAMES,
my_main = "Ridge yes interaction CV metrics",
my_xlab = " log lambda")),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"ridge_yes_int_metrics_plot.jpeg",
collapse = ""))
PlotAndSave(function()(
PlotCvMetrics(my_param_values = log(lambda_vals),
my_metric_matrix = ridge_yes_interaction_metrics[["metrics"]],
my_se_matrix = ridge_yes_interaction_metrics[["se"]],
my_best_param_values =log(ExtractBestParams(ridge_yes_int_best_summary)),
my_metric_names = METRICS_NAMES,
my_main = "Ridge yes interaction CV metrics",
my_xlab = " log lambda")),
my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"ridge_yes_int_metrics_plot.jpeg",
collapse = ""))
