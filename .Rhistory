legend = c("growing", "pruning"),
col = c("black","red"),
pch = 16)
abline(v = min_size_mars)
}
PlotAndSave(temp_plot_function, my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_gcv_plot.jpeg",
collapse = ""))
mars_step = polymars(responses = dati$y[BALANCED_ID_vector],
predictors = dati[BALANCED_ID_vector,-y_index],
gcv = 1,
factors = factor_index,
maxsize = 10,
classify = TRUE)
print("mars min size gcv")
min_size_mars = mars_step$fitting$size[which.min(mars_step$fitting$GCV)]
min_size_mars
temp_plot_function = function(){
plot(mars_step$fitting$size, mars_step$fitting$GCV,
col = as.factor(mars_step$fitting$`0/1`),
pch = 16,
xlab = "basis number",
ylab = "GCV",
main = "MARS step GCV")
legend(c("topright"),
legend = c("growing", "pruning"),
col = c("black","red"),
pch = 16)
abline(v = min_size_mars)
}
PlotAndSave(temp_plot_function, my_path_plot = paste(FIGURES_FOLDER_RELATIVE_PATH,
"mars_gcv_plot.jpeg",
collapse = ""))
design.polymars(mars_step)
design.polymars(mars_step, dati)
design.polymars(mars_step, dati[,-y_index])
?lm
mars_design = design.polymars(mars_step, dati[,-y_index])
lm(dati$y[BALANCED_ID_vector] ~ mars_design)
lm(dati$y ~ mars_design)
mars_design
lm(dati$y ~ mars_design) %>% predict()
ManualCvMARS = function(my_id_list_cv_train,
my_metric_names,
my_y,
my_design_matrix,
my_weights = 1,
use_only_first_fold = FALSE,
is_classification = FALSE,
my_threshold = 0.5,
my_id_list_cv_test = NULL){
n_k_fold = length(my_id_list_cv_train)
my_n_metrics = length(my_metric_names)
if(use_only_first_fold == TRUE){
n_k_fold = 1
}
if(is.null(my_id_list_cv_test)){
my_id_list_cv_test = my_id_list_cv_train
}
temp_metrics_array_cv = matrix(NA, nrow = n_k_fold, ncol = my_n_metrics)
for (k in 1:n_k_fold){
id_train = unlist(my_id_list_cv_train[-k])
id_test = my_id_list_cv_test[[k]]
temp_predictions = predict(lm(my_y[id_train] ~ -1 + my_design_matrix[id_train,]),
x = my_design_matrix[id_test,])
if(is_classification){
temp_predictions = temp_predictions > my_threshold %>% as.numeric
}
temp_metrics_array_cv[k,] = USED.Metrics(temp_predictions,
my_data$y[id_test],
weights = my_weights[id_test])
rm(temp_model)
rm(temp_predictions)
gc()
print(paste("fold ", k, collapse = ""))
}
# averaged metrics matrix
cv_metrics = apply(temp_metrics_array_cv, 2, mean)
return(cv_metrics)
}
# pay attention to the column
mars_cv_metrics = ManualCvMARS(my_id_list_cv_train = ID_CV_LIST_BALANCED,
my_id_list_cv_test = ID_CV_LIST_UNBALANCED,
my_metric_names = METRICS_NAMES,
my_y = dati$y,
my_design_matrix = mars_design,
my_model_type = "gam",
my_weights = MY_WEIGHTS,
use_only_first_fold = USE_ONLY_FIRST_FOLD,
is_classification = TRUE,
my_threshold = MY_THRESHOLD)
# pay attention to the column
mars_cv_metrics = ManualCvMARS(my_id_list_cv_train = ID_CV_LIST_BALANCED,
my_id_list_cv_test = ID_CV_LIST_UNBALANCED,
my_metric_names = METRICS_NAMES,
my_y = dati$y,
my_design_matrix = mars_design,
my_weights = MY_WEIGHTS,
use_only_first_fold = USE_ONLY_FIRST_FOLD,
is_classification = TRUE,
my_threshold = MY_THRESHOLD)
ManualCvMARS = function(my_id_list_cv_train,
my_metric_names,
my_y,
my_design_matrix,
my_weights = 1,
use_only_first_fold = FALSE,
is_classification = FALSE,
my_threshold = 0.5,
my_id_list_cv_test = NULL){
n_k_fold = length(my_id_list_cv_train)
my_n_metrics = length(my_metric_names)
if(use_only_first_fold == TRUE){
n_k_fold = 1
}
if(is.null(my_id_list_cv_test)){
my_id_list_cv_test = my_id_list_cv_train
}
temp_metrics_array_cv = matrix(NA, nrow = n_k_fold, ncol = my_n_metrics)
for (k in 1:n_k_fold){
id_train = unlist(my_id_list_cv_train[-k])
id_test = my_id_list_cv_test[[k]]
temp_predictions = predict(lm(my_y[id_train] ~ -1 + my_design_matrix[id_train,]),
x = my_design_matrix[id_test,])
if(is_classification){
temp_predictions = temp_predictions > my_threshold %>% as.numeric
}
temp_metrics_array_cv[k,] = USED.Metrics(temp_predictions,
my_y[id_test],
weights = my_weights[id_test])
rm(temp_predictions)
gc()
print(paste("fold ", k, collapse = ""))
}
# averaged metrics matrix
cv_metrics = apply(temp_metrics_array_cv, 2, mean)
return(cv_metrics)
}
# pay attention to the column
mars_cv_metrics = ManualCvMARS(my_id_list_cv_train = ID_CV_LIST_BALANCED,
my_id_list_cv_test = ID_CV_LIST_UNBALANCED,
my_metric_names = METRICS_NAMES,
my_y = dati$y,
my_design_matrix = mars_design,
my_weights = MY_WEIGHTS,
use_only_first_fold = USE_ONLY_FIRST_FOLD,
is_classification = TRUE,
my_threshold = MY_THRESHOLD)
ManualCvMARS = function(my_id_list_cv_train,
my_metric_names,
my_y,
my_design_matrix,
my_weights = 1,
use_only_first_fold = FALSE,
is_classification = FALSE,
my_threshold = 0.5,
my_id_list_cv_test = NULL){
n_k_fold = length(my_id_list_cv_train)
my_n_metrics = length(my_metric_names)
if(use_only_first_fold == TRUE){
n_k_fold = 1
}
if(is.null(my_id_list_cv_test)){
my_id_list_cv_test = my_id_list_cv_train
}
temp_metrics_array_cv = matrix(NA, nrow = n_k_fold, ncol = my_n_metrics)
for (k in 1:n_k_fold){
id_train = unlist(my_id_list_cv_train[-k])
id_test = my_id_list_cv_test[[k]]
temp_predictions = predict(lm(my_y[id_train] ~ -1 + my_design_matrix[id_train,]),
x = my_design_matrix[id_test,])
if(is_classification == TRUE){
temp_predictions = temp_predictions > my_threshold %>% as.numeric
}
temp_metrics_array_cv[k,] = USED.Metrics(temp_predictions,
my_y[id_test],
weights = my_weights[id_test])
rm(temp_predictions)
gc()
print(paste("fold ", k, collapse = ""))
}
# averaged metrics matrix
cv_metrics = apply(temp_metrics_array_cv, 2, mean)
return(cv_metrics)
}
# pay attention to the column
mars_cv_metrics = ManualCvMARS(my_id_list_cv_train = ID_CV_LIST_BALANCED,
my_id_list_cv_test = ID_CV_LIST_UNBALANCED,
my_metric_names = METRICS_NAMES,
my_y = dati$y,
my_design_matrix = mars_design,
my_weights = MY_WEIGHTS,
use_only_first_fold = USE_ONLY_FIRST_FOLD,
is_classification = TRUE,
my_threshold = MY_THRESHOLD)
ManualCvMARS = function(my_id_list_cv_train,
my_metric_names,
my_y,
my_design_matrix,
my_weights = 1,
use_only_first_fold = FALSE,
is_classification = FALSE,
my_threshold = 0.5,
my_id_list_cv_test = NULL){
n_k_fold = length(my_id_list_cv_train)
my_n_metrics = length(my_metric_names)
if(use_only_first_fold == TRUE){
n_k_fold = 1
}
if(is.null(my_id_list_cv_test)){
my_id_list_cv_test = my_id_list_cv_train
}
temp_metrics_array_cv = matrix(NA, nrow = n_k_fold, ncol = my_n_metrics)
for (k in 1:n_k_fold){
id_train = unlist(my_id_list_cv_train[-k])
id_test = my_id_list_cv_test[[k]]
temp_predictions = predict(lm(my_y[id_train] ~ -1 + my_design_matrix[id_train,]),
x = my_design_matrix[id_test,])
print(temp_predictions)
if(is_classification == TRUE){
temp_predictions = temp_predictions > my_threshold %>% as.numeric
}
temp_metrics_array_cv[k,] = USED.Metrics(temp_predictions,
my_y[id_test],
weights = my_weights[id_test])
rm(temp_predictions)
gc()
print(paste("fold ", k, collapse = ""))
}
# averaged metrics matrix
cv_metrics = apply(temp_metrics_array_cv, 2, mean)
return(cv_metrics)
}
# pay attention to the column
mars_cv_metrics = ManualCvMARS(my_id_list_cv_train = ID_CV_LIST_BALANCED,
my_id_list_cv_test = ID_CV_LIST_UNBALANCED,
my_metric_names = METRICS_NAMES,
my_y = dati$y,
my_design_matrix = mars_design,
my_weights = MY_WEIGHTS,
use_only_first_fold = USE_ONLY_FIRST_FOLD,
is_classification = TRUE,
my_threshold = MY_THRESHOLD)
ManualCvMARS = function(my_id_list_cv_train,
my_metric_names,
my_y,
my_design_matrix,
my_weights = 1,
use_only_first_fold = FALSE,
is_classification = FALSE,
my_threshold = 0.5,
my_id_list_cv_test = NULL){
n_k_fold = length(my_id_list_cv_train)
my_n_metrics = length(my_metric_names)
if(use_only_first_fold == TRUE){
n_k_fold = 1
}
if(is.null(my_id_list_cv_test)){
my_id_list_cv_test = my_id_list_cv_train
}
temp_metrics_array_cv = matrix(NA, nrow = n_k_fold, ncol = my_n_metrics)
for (k in 1:n_k_fold){
id_train = unlist(my_id_list_cv_train[-k])
id_test = my_id_list_cv_test[[k]]
temp_predictions = predict(lm(my_y[id_train] ~ -1 + my_design_matrix[id_train,]),
x = my_design_matrix[id_test,])
if(is_classification == TRUE){
temp_predictions = temp_predictions > my_threshold
#debug
print(table(temp_predictions))
}
temp_metrics_array_cv[k,] = USED.Metrics(temp_predictions,
my_y[id_test],
weights = my_weights[id_test])
rm(temp_predictions)
gc()
print(paste("fold ", k, collapse = ""))
}
# averaged metrics matrix
cv_metrics = apply(temp_metrics_array_cv, 2, mean)
return(cv_metrics)
}
# pay attention to the column
mars_cv_metrics = ManualCvMARS(my_id_list_cv_train = ID_CV_LIST_BALANCED,
my_id_list_cv_test = ID_CV_LIST_UNBALANCED,
my_metric_names = METRICS_NAMES,
my_y = dati$y,
my_design_matrix = mars_design,
my_weights = MY_WEIGHTS,
use_only_first_fold = USE_ONLY_FIRST_FOLD,
is_classification = TRUE,
my_threshold = MY_THRESHOLD)
ManualCvMARS = function(my_id_list_cv_train,
my_metric_names,
my_y,
my_design_matrix,
my_weights = 1,
use_only_first_fold = FALSE,
is_classification = FALSE,
my_threshold = 0.5,
my_id_list_cv_test = NULL){
n_k_fold = length(my_id_list_cv_train)
my_n_metrics = length(my_metric_names)
if(use_only_first_fold == TRUE){
n_k_fold = 1
}
if(is.null(my_id_list_cv_test)){
my_id_list_cv_test = my_id_list_cv_train
}
temp_metrics_array_cv = matrix(NA, nrow = n_k_fold, ncol = my_n_metrics)
for (k in 1:n_k_fold){
id_train = unlist(my_id_list_cv_train[-k])
id_test = my_id_list_cv_test[[k]]
temp_predictions = predict(lm(my_y[id_train] ~ -1 + my_design_matrix[id_train,]),
x = my_design_matrix[id_test,])
if(is_classification == TRUE){
temp_predictions = temp_predictions > my_threshold
#debug
print(table(temp_predictions))
print(table(my_y[id_test]))
}
temp_metrics_array_cv[k,] = USED.Metrics(temp_predictions,
my_y[id_test],
weights = my_weights[id_test])
rm(temp_predictions)
gc()
print(paste("fold ", k, collapse = ""))
}
# averaged metrics matrix
cv_metrics = apply(temp_metrics_array_cv, 2, mean)
return(cv_metrics)
}
# pay attention to the column
mars_cv_metrics = ManualCvMARS(my_id_list_cv_train = ID_CV_LIST_BALANCED,
my_id_list_cv_test = ID_CV_LIST_UNBALANCED,
my_metric_names = METRICS_NAMES,
my_y = dati$y,
my_design_matrix = mars_design,
my_weights = MY_WEIGHTS,
use_only_first_fold = USE_ONLY_FIRST_FOLD,
is_classification = TRUE,
my_threshold = MY_THRESHOLD)
ManualCvMARS = function(my_id_list_cv_train,
my_metric_names,
my_y,
my_design_matrix,
my_weights = 1,
use_only_first_fold = FALSE,
is_classification = FALSE,
my_threshold = 0.5,
my_id_list_cv_test = NULL){
n_k_fold = length(my_id_list_cv_train)
my_n_metrics = length(my_metric_names)
if(use_only_first_fold == TRUE){
n_k_fold = 1
}
if(is.null(my_id_list_cv_test)){
my_id_list_cv_test = my_id_list_cv_train
}
temp_metrics_array_cv = matrix(NA, nrow = n_k_fold, ncol = my_n_metrics)
for (k in 1:n_k_fold){
id_train = unlist(my_id_list_cv_train[-k])
id_test = my_id_list_cv_test[[k]]
temp_predictions = predict(lm(my_y[id_train] ~ -1 + my_design_matrix[id_train,]),
newdata = my_design_matrix[id_test,])
if(is_classification == TRUE){
temp_predictions = temp_predictions > my_threshold
#debug
print(table(temp_predictions))
print(table(my_y[id_test]))
}
temp_metrics_array_cv[k,] = USED.Metrics(temp_predictions,
my_y[id_test],
weights = my_weights[id_test])
rm(temp_predictions)
gc()
print(paste("fold ", k, collapse = ""))
}
# averaged metrics matrix
cv_metrics = apply(temp_metrics_array_cv, 2, mean)
return(cv_metrics)
}
# pay attention to the column
mars_cv_metrics = ManualCvMARS(my_id_list_cv_train = ID_CV_LIST_BALANCED,
my_id_list_cv_test = ID_CV_LIST_UNBALANCED,
my_metric_names = METRICS_NAMES,
my_y = dati$y,
my_design_matrix = mars_design,
my_weights = MY_WEIGHTS,
use_only_first_fold = USE_ONLY_FIRST_FOLD,
is_classification = TRUE,
my_threshold = MY_THRESHOLD)
ManualCvMARS = function(my_id_list_cv_train,
my_metric_names,
my_y,
my_design_matrix,
my_weights = 1,
use_only_first_fold = FALSE,
is_classification = FALSE,
my_threshold = 0.5,
my_id_list_cv_test = NULL){
n_k_fold = length(my_id_list_cv_train)
my_n_metrics = length(my_metric_names)
if(use_only_first_fold == TRUE){
n_k_fold = 1
}
if(is.null(my_id_list_cv_test)){
my_id_list_cv_test = my_id_list_cv_train
}
temp_metrics_array_cv = matrix(NA, nrow = n_k_fold, ncol = my_n_metrics)
for (k in 1:n_k_fold){
id_train = unlist(my_id_list_cv_train[-k])
id_test = my_id_list_cv_test[[k]]
W = solve(t(my_design_matrix[id_train,]) %*% my_design_matrix[id_train,])
temp_predictions = my_design_matrix[id_test,] %*%
W %*%
t(my_design_matrix[id_train,]) %*%
as.matrix(my_y[id_train])
if(is_classification == TRUE){
temp_predictions = temp_predictions > my_threshold
#debug
print(table(temp_predictions))
print(table(my_y[id_test]))
}
temp_metrics_array_cv[k,] = USED.Metrics(temp_predictions,
my_y[id_test],
weights = my_weights[id_test])
rm(temp_predictions)
gc()
print(paste("fold ", k, collapse = ""))
}
# averaged metrics matrix
cv_metrics = apply(temp_metrics_array_cv, 2, mean)
return(cv_metrics)
}
# pay attention to the column
mars_cv_metrics = ManualCvMARS(my_id_list_cv_train = ID_CV_LIST_BALANCED,
my_id_list_cv_test = ID_CV_LIST_UNBALANCED,
my_metric_names = METRICS_NAMES,
my_y = dati$y,
my_design_matrix = mars_design,
my_weights = MY_WEIGHTS,
use_only_first_fold = USE_ONLY_FIRST_FOLD,
is_classification = TRUE,
my_threshold = MY_THRESHOLD)
mars_cv_metrics
ManualCvMARS = function(my_id_list_cv_train,
my_metric_names,
my_y,
my_design_matrix,
my_weights = 1,
use_only_first_fold = FALSE,
is_classification = FALSE,
my_threshold = 0.5,
my_id_list_cv_test = NULL){
n_k_fold = length(my_id_list_cv_train)
my_n_metrics = length(my_metric_names)
if(use_only_first_fold == TRUE){
n_k_fold = 1
}
if(is.null(my_id_list_cv_test)){
my_id_list_cv_test = my_id_list_cv_train
}
temp_metrics_array_cv = matrix(NA, nrow = n_k_fold, ncol = my_n_metrics)
for (k in 1:n_k_fold){
id_train = unlist(my_id_list_cv_train[-k])
id_test = my_id_list_cv_test[[k]]
W = solve(t(my_design_matrix[id_train,]) %*% my_design_matrix[id_train,])
temp_predictions = my_design_matrix[id_test,] %*%
W %*%
t(my_design_matrix[id_train,]) %*%
as.matrix(my_y[id_train])
if(is_classification == TRUE){
temp_predictions = temp_predictions > my_threshold
}
temp_metrics_array_cv[k,] = USED.Metrics(temp_predictions,
my_y[id_test],
weights = my_weights[id_test])
rm(temp_predictions)
gc()
print(paste("fold ", k, collapse = ""))
}
# averaged metrics matrix
cv_metrics = apply(temp_metrics_array_cv, 2, mean)
return(cv_metrics)
}
# pay attention to the column
mars_cv_metrics = ManualCvMARS(my_id_list_cv_train = ID_CV_LIST_BALANCED,
my_id_list_cv_test = ID_CV_LIST_UNBALANCED,
my_metric_names = METRICS_NAMES,
my_y = dati$y,
my_design_matrix = mars_design,
my_weights = MY_WEIGHTS,
use_only_first_fold = USE_ONLY_FIRST_FOLD,
is_classification = TRUE,
my_threshold = MY_THRESHOLD)
df_metrics = Add_Test_Metric(df_metrics,
"MARS",
mars_cv_metrics)
df_metrics
rm(mars_design)
# save the df_metrics as .Rdata
save(df_metrics, file = "df_metrics.Rdata")
mars_names = colnames(data[,-y_index])
file_name_mars_step = paste(MODELS_FOLDER_RELATIVE_PATH,
"mars_step",
".Rdata", collapse = "", sep = "")
save(mars_step,
mars_names,
file = file_name_mars_step)
rm(mars_step)
gc()
